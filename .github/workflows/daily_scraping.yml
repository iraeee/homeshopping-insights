name: Daily Labangba Scraping

on:
  schedule:
    # 23:56 KST = 14:56 UTC
    - cron: '56 14 * * *'
    
  workflow_dispatch:
    inputs:
      force_run:
        description: '강제 실행'
        required: false
        default: 'false'

jobs:
  scrape-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        pip install requests pandas streamlit plotly
        sudo apt-get update && sudo apt-get install -y zstd
    
    - name: Decompress database
      run: |
        if [ -f "schedule.db.zst" ]; then
          echo "📦 DB 압축 해제..."
          zstd -d schedule.db.zst -o schedule.db --force
        fi
        ls -lh schedule.db || echo "DB 파일 없음 - 새로 생성됨"
    
    - name: Create backup
      run: |
        mkdir -p backups
        if [ -f "schedule.db" ]; then
          cp schedule.db "backups/schedule_$(date +%Y%m%d_%H%M).db"
          echo "💾 백업 생성 완료"
        fi
        find backups -name "*.db" -mtime +7 -delete 2>/dev/null || true
    
    - name: Update cookie from secrets
      env:
        LABANGBA_COOKIE: ${{ secrets.LABANGBA_COOKIE }}
      run: |
        if [ ! -z "$LABANGBA_COOKIE" ]; then
          python cookie_updater.py || echo "쿠키 업데이트 스킵"
        fi
    
    - name: Run scraping
      run: |
        echo "🚀 크롤링 시작: $(date '+%Y-%m-%d %H:%M:%S')"
        python scrape_schedule.py || echo "크롤링 실패 - 파일 확인 필요"
    
    - name: Check data quality
      id: data_check
      run: |
        python check_data.py || echo "데이터 체크 스킵"
    
    - name: Update aggregate tables
      if: success()
      run: |
        if [ -f "update_aggregate_tables.py" ]; then
          python update_aggregate_tables.py || true
        fi
    
    - name: Compress database
      run: |
        if [ -f "schedule.db" ]; then
          echo "📦 DB 압축..."
          zstd -19 schedule.db -o schedule.db.zst --force
          rm schedule.db
          ls -lh schedule.db.zst
        fi
    
    - name: Generate status report
      if: always()
      run: |
        cat > generate_report.py << 'SCRIPT_END'
        import json
        import os
        from datetime import datetime
        
        # 체크 결과 로드
        status = {}
        if os.path.exists('data_check.json'):
            with open('data_check.json', 'r') as f:
                status = json.load(f)
        
        # README 생성
        badge_color = 'success' if status.get('status') == 'OK' else 'critical'
        badge_text = status.get('message', 'Unknown')
        
        readme_content = f"""# 라방바 데이터 수집 시스템
        
        ![상태](https://img.shields.io/badge/Status-{badge_text.replace(' ', '%20')}-{badge_color})
        ![업데이트](https://img.shields.io/badge/Updated-{datetime.now().strftime('%Y-%m-%d').replace(' ', '%20')}-blue)
        
        ## 📊 최근 수집 결과
        
        - **날짜**: {status.get('date', 'N/A')}
        - **총 레코드**: {status.get('total', 0):,}개
        - **0원 매출**: {status.get('zero_count', 0)}개 ({status.get('zero_ratio', 0):.1f}%)
        - **평균 매출**: {status.get('avg_revenue', 0):,.0f}원
        
        ---
        *자동 업데이트: 매일 23:56*
        """
        
        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(readme_content)
        SCRIPT_END
        
        python generate_report.py
    
    - name: Commit and push
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add -A
        
        MESSAGE="📊 Update: $(date +%Y-%m-%d)"
        if [ -f "data_check.json" ]; then
          STATUS=$(python3 -c "import json; print(json.load(open('data_check.json'))['status'])" 2>/dev/null || echo "UNKNOWN")
          TOTAL=$(python3 -c "import json; print(json.load(open('data_check.json'))['total'])" 2>/dev/null || echo "0")
          MESSAGE="📊 Update: $(date +%Y-%m-%d) - $TOTAL records [$STATUS]"
        fi
        
        git diff --quiet && git diff --staged --quiet || {
          git commit -m "$MESSAGE"
          git push
        }
