name: Daily Labangba Scraping

on:
  schedule:
    # 23:56 KST = 14:56 UTC
    - cron: '56 14 * * *'
    
  workflow_dispatch:
    inputs:
      force_run:
        description: '강제 실행'
        required: false
        default: 'false'

permissions:
  contents: write
  actions: read

jobs:
  scrape-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        pip install requests pandas streamlit plotly
        sudo apt-get update && sudo apt-get install -y zstd
    
    - name: Decompress database
      run: |
        if [ -f "schedule.db.zst" ]; then
          echo "📦 DB 압축 해제..."
          zstd -d schedule.db.zst -o schedule.db --force
        else
          echo "DB 파일 없음 - 새로 생성"
          touch schedule.db
        fi
        ls -lh schedule.db || true
    
    - name: Create backup
      run: |
        mkdir -p backups
        if [ -f "schedule.db" ]; then
          cp schedule.db "backups/schedule_$(date +%Y%m%d_%H%M).db"
          echo "💾 백업 생성 완료"
        fi
        find backups -name "*.db" -mtime +7 -delete 2>/dev/null || true
    
    - name: Update cookie from secrets
      env:
        LABANGBA_COOKIE: ${{ secrets.LABANGBA_COOKIE }}
      run: |
        if [ ! -z "$LABANGBA_COOKIE" ] && [ -f "cookie_updater.py" ]; then
          python cookie_updater.py || echo "쿠키 업데이트 스킵"
        fi
    
    - name: Run scraping
      run: |
        echo "🚀 크롤링 시작: $(date '+%Y-%m-%d %H:%M:%S')"
        if [ -f "scrape_schedule.py" ]; then
          python scrape_schedule.py || echo "크롤링 실패 - 로그 확인"
        else
          echo "⚠️ scrape_schedule.py 파일이 없습니다!"
        fi
    
    - name: Check data quality
      id: data_check
      run: |
        if [ -f "check_data.py" ]; then
          python check_data.py || echo "데이터 체크 실패"
        else
          echo "check_data.py 파일 없음"
        fi
    
    - name: Update aggregate tables
      if: success()
      run: |
        if [ -f "update_aggregate_tables.py" ]; then
          python update_aggregate_tables.py || true
        fi
    
    - name: Compress database
      run: |
        if [ -f "schedule.db" ]; then
          echo "📦 DB 압축..."
          zstd -19 schedule.db -o schedule.db.zst --force
          rm schedule.db
          ls -lh schedule.db.zst
        fi
    
    - name: Generate README
      if: always()
      run: |
        if [ -f "generate_readme.py" ]; then
          python generate_readme.py
        else
          echo "generate_readme.py 없음 - README 업데이트 스킵"
        fi
    
    - name: Commit and push
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add -A
        
        MESSAGE="📊 Update: $(date +%Y-%m-%d)"
        if [ -f "data_check.json" ]; then
          STATUS=$(python3 -c "import json; print(json.load(open('data_check.json')).get('status', 'UNKNOWN'))" 2>/dev/null || echo "UNKNOWN")
          TOTAL=$(python3 -c "import json; print(json.load(open('data_check.json')).get('total', 0))" 2>/dev/null || echo "0")
          MESSAGE="📊 Update: $(date +%Y-%m-%d) - $TOTAL records [$STATUS]"
        fi
        
        git diff --quiet && git diff --staged --quiet || {
          git commit -m "$MESSAGE"
          git push origin main
        }
    
    - name: Send Discord notification
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ] && [ -f "send_discord.py" ]; then
          python send_discord.py || echo "Discord 알림 실패"
        fi
