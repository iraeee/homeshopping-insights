# HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ìï®Ïàò (dashboard_strategy_analysis.py Ï∂îÍ∞Ä Î∂ÄÎ∂Ñ)

def generate_enhanced_html_report(analysis_df, strategy_name, platform, weekday, 
                                  top_hours, top_prices, metrics):
    """Ìñ•ÏÉÅÎêú HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
    
    # Ï∞®Ìä∏Î•º HTMLÎ°ú Î≥ÄÌôò
    charts_html = ""
    
    if not top_hours.empty:
        # ÏãúÍ∞ÑÎåÄÎ≥Ñ ROI Ï∞®Ìä∏
        fig_hours = go.Figure()
        
        # ÎßâÎåÄ Í∑∏ÎûòÌîÑ
        fig_hours.add_trace(go.Bar(
            name='ÌèâÍ∑† ROI',
            x=[f"{int(h)}Ïãú" for h in top_hours['hour']],
            y=top_hours['roi'],
            text=[f"{roi:.1f}%" for roi in top_hours['roi']],
            textposition='outside',
            marker_color='#667eea'
        ))
        
        # ÏÑ† Í∑∏ÎûòÌîÑ
        fig_hours.add_trace(go.Scatter(
            name='Ï†àÏÇ¨ÌèâÍ∑† ROI',
            x=[f"{int(h)}Ïãú" for h in top_hours['hour']],
            y=top_hours['trimmed_roi'],
            mode='lines+markers',
            line=dict(color='#FF0080', width=2),
            marker=dict(size=8)
        ))
        
        fig_hours.update_layout(
            title="ÏãúÍ∞ÑÎåÄÎ≥Ñ ROI Î∂ÑÏÑù",
            height=450,
            paper_bgcolor='white',
            plot_bgcolor='#f8f9fa'
        )
        
        charts_html = pio.to_html(fig_hours, include_plotlyjs='cdn')
    
    # HTML ÌÖúÌîåÎ¶ø
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <title>ÌôàÏáºÌïë Ï†ÑÎûµ Î∂ÑÏÑù Î≥¥Í≥†ÏÑú - {strategy_name}</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;600;700;900&display=swap');
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Noto Sans KR', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }}
            
            .container {{
                max-width: 1400px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                overflow: hidden;
                box-shadow: 0 20px 60px rgba(0,0,0,0.2);
            }}
            
            .header {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 40px;
                text-align: center;
                color: white;
            }}
            
            .header h1 {{
                font-size: 2.5rem;
                font-weight: 900;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
            }}
            
            .header .subtitle {{
                font-size: 1.2rem;
                opacity: 0.95;
            }}
            
            .content {{
                padding: 40px;
            }}
            
            .section {{
                margin-bottom: 40px;
            }}
            
            .section-title {{
                font-size: 1.8rem;
                color: #2d3748;
                margin-bottom: 20px;
                padding-bottom: 10px;
                border-bottom: 3px solid #667eea;
                display: flex;
                align-items: center;
                gap: 10px;
            }}
            
            .metrics-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }}
            
            .metric-card {{
                background: linear-gradient(135deg, #f7fafc 0%, #ffffff 100%);
                border: 1px solid #e2e8f0;
                border-radius: 12px;
                padding: 20px;
                text-align: center;
                transition: all 0.3s ease;
            }}
            
            .metric-card:hover {{
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(102, 126, 234, 0.2);
                border-color: #667eea;
            }}
            
            .metric-label {{
                font-size: 0.9rem;
                color: #718096;
                margin-bottom: 8px;
                font-weight: 600;
            }}
            
            .metric-value {{
                font-size: 2rem;
                font-weight: 900;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }}
            
            .metric-sub {{
                font-size: 0.8rem;
                color: #a0aec0;
                margin-top: 5px;
            }}
            
            .insight-box {{
                background: linear-gradient(135deg, rgba(102,126,234,0.1) 0%, rgba(118,75,162,0.1) 100%);
                border-left: 5px solid #667eea;
                border-radius: 10px;
                padding: 20px;
                margin: 20px 0;
            }}
            
            .insight-title {{
                font-size: 1.2rem;
                color: #667eea;
                font-weight: 700;
                margin-bottom: 10px;
            }}
            
            .insight-content {{
                color: #4a5568;
                line-height: 1.8;
            }}
            
            .time-analysis {{
                background: #f8f9fa;
                border-radius: 12px;
                padding: 20px;
                margin-bottom: 20px;
            }}
            
            .time-rank {{
                display: inline-block;
                width: 40px;
                height: 40px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 50%;
                text-align: center;
                line-height: 40px;
                font-weight: 900;
                margin-right: 15px;
            }}
            
            .time-details {{
                display: flex;
                align-items: center;
                margin-bottom: 15px;
                padding: 15px;
                background: white;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }}
            
            .time-info {{
                flex: 1;
            }}
            
            .time-hour {{
                font-size: 1.3rem;
                font-weight: 700;
                color: #2d3748;
                margin-bottom: 5px;
            }}
            
            .time-stats {{
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
                margin-top: 10px;
            }}
            
            .time-stat {{
                text-align: center;
            }}
            
            .time-stat-label {{
                font-size: 0.8rem;
                color: #718096;
            }}
            
            .time-stat-value {{
                font-size: 1.1rem;
                font-weight: 700;
                color: #2d3748;
            }}
            
            .recommendation-card {{
                background: linear-gradient(135deg, #10b981 0%, #3b82f6 100%);
                color: white;
                border-radius: 15px;
                padding: 30px;
                margin: 30px 0;
                text-align: center;
            }}
            
            .recommendation-title {{
                font-size: 1.5rem;
                font-weight: 900;
                margin-bottom: 15px;
            }}
            
            .recommendation-content {{
                font-size: 1.1rem;
                line-height: 1.8;
            }}
            
            .chart-container {{
                background: white;
                border-radius: 12px;
                padding: 20px;
                margin: 20px 0;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }}
            
            .footer {{
                background: #2d3748;
                color: white;
                text-align: center;
                padding: 30px;
                font-size: 0.9rem;
            }}
            
            .footer a {{
                color: #667eea;
                text-decoration: none;
            }}
            
            @media print {{
                body {{
                    background: white;
                }}
                .container {{
                    box-shadow: none;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <!-- Ìó§Îçî -->
            <div class="header">
                <h1>üéØ ÌôàÏáºÌïë Ï†ÑÎûµ Î∂ÑÏÑù Î≥¥Í≥†ÏÑú</h1>
                <div class="subtitle">
                    {strategy_name} | {platform} | {weekday} | {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')}
                </div>
            </div>
            
            <!-- ÏΩòÌÖêÏ∏† -->
            <div class="content">
                <!-- ÌïµÏã¨ ÏßÄÌëú ÏÑπÏÖò -->
                <div class="section">
                    <h2 class="section-title">üìä ÌïµÏã¨ ÏÑ±Í≥º ÏßÄÌëú</h2>
                    <div class="metrics-grid">
                        <div class="metric-card">
                            <div class="metric-label">Ï¥ù Îß§Ï∂ú</div>
                            <div class="metric-value">{metrics.get('total_revenue', 0):.1f}Ïñµ</div>
                            <div class="metric-sub">Ï†ÑÏ≤¥ Îß§Ï∂úÏï°</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">ÌèâÍ∑† ROI</div>
                            <div class="metric-value">{metrics.get('avg_roi', 0):.1f}%</div>
                            <div class="metric-sub">Ï†àÏÇ¨: {metrics.get('trimmed_roi', 0):.1f}%</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">ÏàúÏù¥Ïùµ</div>
                            <div class="metric-value">{metrics.get('total_profit', 0):.1f}Ïñµ</div>
                            <div class="metric-sub">Ïã§Ïßà ÏàòÏùµ</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-label">ÏµúÏ†Å ÏãúÍ∞Ñ</div>
                            <div class="metric-value">{metrics.get('best_hour', 0)}Ïãú</div>
                            <div class="metric-sub">ÏµúÍ≥† ROI ÏãúÍ∞ÑÎåÄ</div>
                        </div>
                    </div>
                </div>
                
                <!-- ROI Í≥ÑÏÇ∞Î≤ï ÏÑ§Î™Ö -->
                <div class="section">
                    <h2 class="section-title">üí° Î∂ÑÏÑù Í∏∞Ï§Ä Î∞è Í≥ÑÏÇ∞Î≤ï</h2>
                    <div class="insight-box">
                        <div class="insight-title">ROI Í≥ÑÏÇ∞ Í≥µÏãù</div>
                        <div class="insight-content">
                            <strong>ROI(%) = [(Îß§Ï∂ú √ó Ïã§ÏßàÎßàÏßÑÏú®) - Ï¥ùÎπÑÏö©] √∑ Ï¥ùÎπÑÏö© √ó 100</strong><br><br>
                            ‚Ä¢ Ïã§ÏßàÎßàÏßÑÏú®: 57.75% (Ï†ÑÌôòÏú® 75% √ó ÎßàÏßÑÏú® 77%)<br>
                            ‚Ä¢ Î™®Îç∏ÎπÑÏö©: ÎùºÏù¥Î∏å 1,040ÎßåÏõê / ÎπÑÎùºÏù¥Î∏å 200ÎßåÏõê<br>
                            ‚Ä¢ Î∞©ÏÜ°ÎπÑÏö©: ÏãúÍ∞ÑÎåÄÎ≥Ñ Ï†ïÏï° (Ï£ºÎßê 13-16Ïãú Ìè¨Ìï®)<br>
                            ‚Ä¢ Ï†úÏô∏ÏãúÍ∞Ñ: 00~05Ïãú (Î™®Îç∏ÎπÑÏö© ÎØ∏Ï†ÅÏö©)
                        </div>
                    </div>
                </div>
                
                <!-- ÏãúÍ∞ÑÎåÄÎ≥Ñ Î∂ÑÏÑù -->
                <div class="section">
                    <h2 class="section-title">‚è∞ ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù</h2>
                    <div class="chart-container">
                        {charts_html}
                    </div>
                    """
    
    # ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    for idx, row in top_hours.head(5).iterrows():
        roi_color = "#10b981" if row['roi'] > 0 else "#ef4444"
        html_content += f"""
                    <div class="time-analysis">
                        <div class="time-details">
                            <span class="time-rank">{idx + 1}</span>
                            <div class="time-info">
                                <div class="time-hour">{int(row['hour'])}Ïãú Î∞©ÏÜ°</div>
                                <div class="time-stats">
                                    <div class="time-stat">
                                        <div class="time-stat-label">ÌèâÍ∑† ROI</div>
                                        <div class="time-stat-value" style="color: {roi_color};">
                                            {row['roi']:.1f}%
                                        </div>
                                    </div>
                                    <div class="time-stat">
                                        <div class="time-stat-label">Ï†àÏÇ¨ ROI</div>
                                        <div class="time-stat-value">
                                            {row.get('trimmed_roi', row['roi']):.1f}%
                                        </div>
                                    </div>
                                    <div class="time-stat">
                                        <div class="time-stat-label">ÏàúÏù¥Ïùµ</div>
                                        <div class="time-stat-value">
                                            {row.get('net_profit', 0):.2f}Ïñµ
                                        </div>
                                    </div>
                                </div>
                                <div style="margin-top: 10px; color: #718096; font-size: 0.9rem;">
                                    Î™®Îç∏ÎπÑÏö©: {row.get('model_cost', 0):.3f}Ïñµ | 
                                    Î∞©ÏÜ°ÎπÑÏö©: {row.get('broadcast_cost', 0):.3f}Ïñµ | 
                                    Î∞©ÏÜ°ÌöüÏàò: {row.get('count', 0)}Ìöå
                                </div>
                            </div>
                        </div>
                    </div>
        """
    
    # Ï∂îÍ∞Ä Î∂ÑÏÑù Ïù∏ÏÇ¨Ïù¥Ìä∏
    html_content += f"""
                </div>
                
                <!-- Ï†ÑÎûµÏ†Å Ï†úÏñ∏ -->
                <div class="section">
                    <h2 class="section-title">üéØ Ï†ÑÎûµÏ†Å Ï†úÏñ∏</h2>
                    <div class="recommendation-card">
                        <div class="recommendation-title">ÏµúÏ†Å Ïö¥ÏòÅ Ï†ÑÎûµ</div>
                        <div class="recommendation-content">
                            {get_strategic_recommendations(top_hours, metrics)}
                        </div>
                    </div>
                    
                    <div class="insight-box">
                        <div class="insight-title">Ï∂îÍ∞Ä Í≥†Î†§ÏÇ¨Ìï≠</div>
                        <div class="insight-content">
                            {get_additional_insights(analysis_df, top_hours, top_prices)}
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Ìë∏ÌÑ∞ -->
            <div class="footer">
                <p>¬© 2025 ÌôàÏáºÌïë Ï†ÑÎûµ Î∂ÑÏÑù ÏãúÏä§ÌÖú | Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>Î≥∏ Î≥¥Í≥†ÏÑúÎäî Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Î∂ÑÏÑù Í≤∞Í≥ºÏù¥Î©∞, Ïã§Ï†ú Ïö¥ÏòÅ Ïãú ÏãúÏû• ÏÉÅÌô©ÏùÑ Í≥†Î†§ÌïòÏó¨ Ï†ÅÏö©ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    return html_content

def get_strategic_recommendations(top_hours, metrics):
    """Ï†ÑÎûµÏ†Å Ï†úÏñ∏ ÏÉùÏÑ±"""
    if top_hours.empty:
        return "Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏïÑ Ï†úÏñ∏ÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
    
    best_hour = top_hours.iloc[0]['hour']
    best_roi = top_hours.iloc[0]['roi']
    
    recommendations = []
    
    # ÏãúÍ∞ÑÎåÄÎ≥Ñ Ï∂îÏ≤ú
    if best_hour in range(7, 12):
        recommendations.append("‚Ä¢ Ïò§Ï†Ñ ÏãúÍ∞ÑÎåÄÍ∞Ä ÏµúÏ†Å ÏÑ±Í≥ºÎ•º Î≥¥ÏûÖÎãàÎã§. Ï£ºÎ∂Ä/ÏãúÎãàÏñ¥ ÌÉÄÍ≤ü ÏÉÅÌíàÏùÑ ÏßëÏ§ë Ìé∏ÏÑ±ÌïòÏÑ∏Ïöî.")
    elif best_hour in range(17, 22):
        recommendations.append("‚Ä¢ Ï†ÄÎÖÅ ÏãúÍ∞ÑÎåÄÍ∞Ä ÏµúÏ†ÅÏûÖÎãàÎã§. Í∞ÄÏ°± Îã®ÏúÑ Íµ¨Îß§Í∞Ä Í∞ÄÎä•Ìïú Í≥†Í∞Ä ÏÉÅÌíàÏùÑ Î∞∞ÏπòÌïòÏÑ∏Ïöî.")
    
    # ROI Í∏∞Î∞ò Ï∂îÏ≤ú
    if best_roi > 30:
        recommendations.append("‚Ä¢ ÎÜíÏùÄ ROIÎ•º Ïú†ÏßÄÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÌòÑÏû¨ Ï†ÑÎûµÏùÑ Ïú†ÏßÄÌïòÎ©∞ Î∞©ÏÜ° ÌöüÏàòÎ•º ÎäòÎ¶¨ÏÑ∏Ïöî.")
    elif best_roi > 10:
        recommendations.append("‚Ä¢ ÏïàÏ†ïÏ†ÅÏù∏ ROIÏûÖÎãàÎã§. ÎπÑÏö© ÏµúÏ†ÅÌôîÎ•º ÌÜµÌï¥ ÏàòÏùµÏÑ±ÏùÑ Í∞úÏÑ†ÌïòÏÑ∏Ïöî.")
    else:
        recommendations.append("‚Ä¢ ROI Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÏÉÅÌíà Íµ¨ÏÑ±Í≥º Í∞ÄÍ≤©ÎåÄÎ•º Ïû¨Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.")
    
    # ÎπÑÏö© Í¥ÄÎ†® Ï∂îÏ≤ú
    avg_model_cost = top_hours['model_cost'].mean()
    if avg_model_cost > 0.08:  # 0.08Ïñµ = 800ÎßåÏõê
        recommendations.append("‚Ä¢ Î™®Îç∏ÎπÑÏö©Ïù¥ ÎÜíÏäµÎãàÎã§. ÎπÑÎùºÏù¥Î∏å Ï±ÑÎÑê ÌôúÏö©ÏùÑ Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.")
    
    return "<br>".join(recommendations)

def get_additional_insights(analysis_df, top_hours, top_prices):
    """Ï∂îÍ∞Ä Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±"""
    insights = []
    
    # ÏãúÍ∞ÑÎåÄ ÏßëÏ§ëÎèÑ
    if not top_hours.empty:
        top3_hours = top_hours.head(3)['hour'].tolist()
        insights.append(f"‚Ä¢ ÏÉÅÏúÑ 3Í∞ú ÏãúÍ∞ÑÎåÄ({', '.join([f'{h}Ïãú' for h in top3_hours])})Ïóê ÏßëÏ§ë Ïö¥ÏòÅÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.")
    
    # Í∞ÄÍ≤©ÎåÄ Î∂ÑÏÑù
    if not top_prices.empty:
        best_price = top_prices.iloc[0]['price_range']
        insights.append(f"‚Ä¢ {best_price} Í∞ÄÍ≤©ÎåÄÍ∞Ä ÏµúÏ†Å ÏÑ±Í≥ºÎ•º Î≥¥ÏûÖÎãàÎã§.")
    
    # Ï£ºÎßê/ÌèâÏùº ÎπÑÍµê
    if 'is_weekend' in analysis_df.columns:
        weekend_roi = analysis_df[analysis_df['is_weekend']]['roi'].mean()
        weekday_roi = analysis_df[~analysis_df['is_weekend']]['roi'].mean()
        if weekend_roi > weekday_roi:
            insights.append(f"‚Ä¢ Ï£ºÎßê ROI({weekend_roi:.1f}%)Í∞Ä ÌèâÏùº({weekday_roi:.1f}%)Î≥¥Îã§ ÎÜíÏäµÎãàÎã§.")
        else:
            insights.append(f"‚Ä¢ ÌèâÏùº ROI({weekday_roi:.1f}%)Í∞Ä Ï£ºÎßê({weekend_roi:.1f}%)Î≥¥Îã§ ÎÜíÏäµÎãàÎã§.")
    
    # ÎπÑÏö© Ìö®Ïú®ÏÑ±
    total_cost = analysis_df['total_cost'].sum()
    total_profit = analysis_df['net_profit'].sum()
    efficiency = (total_profit / total_cost * 100) if total_cost > 0 else 0
    insights.append(f"‚Ä¢ ÎπÑÏö© ÎåÄÎπÑ ÏàòÏùµ Ìö®Ïú®ÏÑ±: {efficiency:.1f}%")
    
    # Í∞úÏÑ† Ìè¨Ïù∏Ìä∏
    negative_roi_count = (analysis_df['roi'] < 0).sum()
    if negative_roi_count > 0:
        negative_ratio = negative_roi_count / len(analysis_df) * 100
        insights.append(f"‚Ä¢ ÏùåÏàò ROI ÎπÑÏú® {negative_ratio:.1f}% - Ìï¥Îãπ ÏãúÍ∞ÑÎåÄ ÏÉÅÌíà Ïû¨Í≤ÄÌÜ† ÌïÑÏöî")
    
    return "<br>".join(insights)
